49
    - react hooks starts with "use"
    - useState needs initial value (could be empty string)
    - useState returns always an array with 2 elements [variable value, updating function]
    - array destrcutring : const [variable name, function name to be called] = 
    - calling the function will revalute the component and is executed again with new updated values
50
    - every time a component is called it receives a new state and detached from other components
    - per component state
53
    - each "on" method on the html element like onClick, onChange takes in a function as argument
    onChange = {() => {}}
54
    - event.target.value always stores a string
55
    - while using single state, react merges old with new and all the keys must be defined inside 
    the object, or else only the deinfed keys will be set.
    - example: setUserInput({
      enteredTitle: event.target.value,
      enteredAmount: '',
      enteredDate: '',
    });
56
    - react schedules state updates and not instantly, so a lot of state updates will result in inconsistent state snapshot
    - whenever we update the state and use previous state we use     setUserInput((prevState) => {
        return {...prevState, enteredTitle: event.target.value};
    });

57
    - event.preventDefault() will not submit the form
59 
    - lifting state up : means moving data from child to parent and to the other connected components
64
    - while updating a state based on previous state, we need to use a function instead of array destructuring to set the update the state
    example:     
    setExpenses((prevExpenses) => {
      return [expense, ...prevExpenses];
    });
65
   - we need key attribute in our jsx so react can differentiate between items and it must be unique or else the array contents values will be overwritten